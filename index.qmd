---
title: WRAIR AFRICA DASHBOARD | AUGUST 2024
author: Strategic Information Unit
format:
  dashboard:
      theme: quartz
      scrolling: true
      nav-buttons:
          - text: Home
          - icon: gitlab
          - search: true
      navbar:
        left:
          - text: Navigation
          - text: Previous data
  
---


```{r echo=FALSE, message=FALSE, warning=FALSE}

if(!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse,
               colorspace,
               plotly,
               reactable,
               bslib,
               bsicons,
               leaflet,
               here,
               ggspatial,
               janitor,
               spData,
               sf,
               units,
               rgeoboundaries,
               rnaturalearth,
               countrycode,
               htmltools,
               reactable,
               lubridate, 
               dplyr,
               shinydashboard,
               fontawesome,
               scales,
               prettydoc,
               skimr,
               ggplot2,
               gganimate,
               tidyr,
               readr,
               gifski,
               png,
               gridExtra,
               grid)


```


```{r echo=FALSE, message=FALSE, warning=FALSE}
# Load the data

prog_data <- read_csv("data/prog_data_aug24.csv")

prog_targets <- read_csv("data/fy24_targets.csv")

vl_data <- read_csv("data/vl_data_aug24.csv")

prog_site <- read_csv("data/prog_sites.csv")

vl_casc <- read_csv("data/vl_data_agesex_aug24.csv")

biom_update <- read_csv("data/biometric_update.csv")

radet <- read_csv("data/radet_sep24.csv")

```


```{r}

# Clean the program data

prog_site <- unique(prog_site) %>% 
  select(org_unit, site)

prog_data <- clean_names(prog_data) %>% 
    select(-numerator, -denominator, -factor, -divisor, -multiplier)
  
prog_data <- prog_data %>% 
  rename(facility = organisation_unit)
  

prog_data$data <- sub(":.*", "_R", prog_data$data)

prog_data$data <- sub(" Numerator_R", "_R", prog_data$data)


prog_data_site <- prog_data %>% 
  left_join(prog_site,
            by = c("facility" = "org_unit"), relationship = "many-to-many")

prog_data_site <- prog_data_site %>% 
  rename(indicator = data)

prog_data_site <- prog_data_site %>% 
  mutate(
    period = parse_date_time(period, orders = "b-y"),
    month = month(period, label = TRUE, abbr = TRUE),
    year = year(period)
  )


# Filter the data for the required period
data_fil <- prog_data_site %>%
  filter(period >= ymd("2023-10-01") & period <= ymd("2024-08-31"))


data_fil_cum <- prog_data_site %>% 
  filter(indicator == "TX_CURR_R" | indicator == "TX_PVLS_D_R",
         month == "Aug")


# Create summary values for each indicator
data_sum <- data_fil %>%
  group_by(indicator) %>%
  summarise(total_value = sum(value, na.rm = TRUE))


# Take out cumulative indicators: TX_CURR_R, TX_PVLS_D_R, and TX_PVLS_N_R
data_sum <- data_sum %>% 
  filter(!indicator %in% c("TX_CURR_R", "TX_PVLS_D_R", "TX_PVLS_N_R", "TX_TB_R"))


# Create program area variable to facilitate join with target data set
data_sum_r <- data_sum %>% 
  mutate(prog_area = sub("_R", "", indicator))


# Create summary values for each cumulative indicator
data_sum_cum <- data_fil_cum %>%
  group_by(indicator) %>%
  summarise(total_value = sum(value, na.rm = TRUE))


# Create program area variable to facilitate join with target data
data_sum_cum_r <- data_sum_cum %>% 
  mutate(prog_area = sub("_R$", "", indicator))


# Join the data_sum_r and data_sum_cum_r data sets

data_sum_r <- data_sum_r %>%
  bind_rows(data_sum_cum_r)

# Change the PrEP target code names

prog_targets <- prog_targets %>% 
  mutate(target_code = str_replace(target_code,"^PREP_", "PrEP_"))



# Create the program area variable in the target data set
prog_targets_t <- prog_targets %>% 
  mutate(prog_area = sub("_T$", "", target_code))


biom_update <- clean_names(biom_update)

```



```{r}

# Clean the vl_casc data

vl_casc <- clean_names(vl_casc) %>% 
  select(-numerator, -denominator, -factor, -divisor, -multiplier)

# Remove all the text after the colon in the indicator names under the data column
vl_casc$data <- sub(":.*", "", vl_casc$data)

# Parse the date column
vl_casc <- vl_casc %>% 
  mutate(
    period = parse_date_time(period, orders = "b-y"),
    month = month(period, label = TRUE, abbr = TRUE),
    year = year(period)
  )

# clean the age group column
vl_casc <- vl_casc %>%
  rename(age_group = age_mer_2_6_regrouped_50) %>%
  mutate(
    age_group = 
      case_when(age_group == "01-Apr" ~ "1-4",
                age_group == "05-Sep" ~ "5-9",
                age_group == "Oct-14" ~ "10-14",
                TRUE ~ age_group
      ))

# Filter the TX_CURR, TX_PVLS_D, and TX_PVLS_N data for August 2024

vl_casc_aug <- vl_casc %>%
  filter(period == ymd("2024-08-01") & age_group != "All") %>% 
  filter(data !="TX_NEW")

```




```{r}

# Create the new variable within the existing vl_casc dataset
vl_casc1 <- vl_casc %>%
  filter(data == "TX_NEW" & month %in% c("Mar", "Apr", "May", "Jun", "Jul","Aug") & year == 2024) %>% 
  group_by(data, sex, age_group) %>%
  summarise(tx_new_sum = sum(value, na.rm = TRUE)) %>%
  ungroup() %>% 
  rename(value = tx_new_sum)


# Combine the new variable with the existing vl_casc_jul dataset

vl_casc2 <- vl_casc_aug %>%
  select(data, sex, age_group, value) %>%
  bind_rows(vl_casc1)

# Calculate the viral load eligibility variable for each age group in the vl_casc2 dataset (TX_CURR - TX_NEW)

vl_casc2_vl_elig <- vl_casc2 %>%
  pivot_wider(names_from = data, values_from = value) %>% # Spread TX_CURR and TX_NEW into separate columns
  mutate(
    TX_CURR = coalesce(TX_CURR, 0),  # Replace NA with 0 for TX_CURR
    TX_NEW = coalesce(TX_NEW, 0), # Replace NA with 0 for TX_NEW
    TX_PVLS_D = coalesce(TX_PVLS_D, 0), # Replace NA with 0 for TX_PVLS_D
    vl_elig = TX_CURR - TX_NEW) %>% # Calculate the difference
  mutate(vl_cov = TX_PVLS_D/vl_elig) #%>%
  # select(sex, age_group, vl_elig) %>% # Select only the necessary columns
  # pivot_longer(cols = vl_elig, names_to = "data", values_to = "value") #%>% # Convert vl_elig back to long format
  #bind_rows(vl_casc2)


vl_plot <- vl_casc2_vl_elig %>%
  mutate(vl_cov = ifelse(is.nan(vl_cov) | is.na(vl_cov), 0, vl_cov))


# Order the age_group factor levels
vl_plot$age_group <- factor(vl_plot$age_group, levels = c("<1", "1-4", "5-9", "10-14", "15-19", "20-24", "25-29", "30-34", "35-39", "40-44", "45-49", "50+"))

# Determine the ratio for scaling the secondary axis
ratio <- max(vl_plot$vl_elig, vl_plot$TX_PVLS_D, na.rm = TRUE) / max(vl_plot$vl_cov, na.rm = TRUE)

# Create the scaled variable for vl_cov
vl_plot <- vl_plot %>%
  mutate(vl_cov_scaled = vl_cov * ratio)

# Plot for Male
vl_plot_male <- vl_plot %>% filter(sex == "Male")

vlc_male <- ggplot(vl_plot_male, aes(x = age_group)) +
 # geom_bar(aes(y = vl_elig, fill = "vl_elig"), stat = "identity", position = position_dodge(width = 0.6), width = 0.4) +
  geom_bar(aes(y = TX_PVLS_D, fill = "TX_PVLS_D"), stat = "identity", position = position_dodge(width = 0.6), width = 0.8) +
  geom_point(aes(y = vl_cov_scaled), size = 6, color = "#e30003", position = position_dodge(width = 0.4)) +
  geom_text(aes(y = vl_cov_scaled, label = scales::percent(vl_cov, accuracy = 1)), vjust = -1, color ="cyan4", fontface ="bold", size = 6) +
  scale_y_continuous(
    name = "Counts",
    labels = label_comma(),  # Format the y-axis with commas
    sec.axis = sec_axis(~ . / ratio, name = "VL Coverage (%)", labels = scales::label_percent(accuracy = 1))
  ) +
  labs(
  #  title = "Viral Load Coverage by Age Group - Male",
    x = "Age Group",
    y = "Counts"
  ) +
  scale_fill_manual(
    name = "",
    values = c("vl_elig" = "blue", "TX_PVLS_D" = "#104c77")
  ) +
  theme_minimal() +
  theme(
    axis.title.y.right = element_text(color = "black"),  # Color secondary axis label
    legend.position = "bottom",
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(), # Remove minor grid lines
    axis.text.x = element_text(size = 14), # Adjust x-axis font size
    axis.text.y = element_text(size = 14) # Adjust y-axis font size
  )

# Plot for Female
vl_plot_female <- vl_plot %>% filter(sex == "Female")

vlc_fem <- ggplot(vl_plot_female, aes(x = age_group)) +
  #geom_bar(aes(y = vl_elig, fill = "vl_elig"), stat = "identity", position = position_dodge(width = 0.6), width = 0.4) +
  geom_bar(aes(y = TX_PVLS_D, fill = "TX_PVLS_D"), stat = "identity", position = position_dodge(width = 0.6), width = 0.8) +
  geom_point(aes(y = vl_cov_scaled), size = 6, color ="#104c77", position = position_dodge(width = 0.4)) +
  geom_text(aes(y = vl_cov_scaled, label = scales::percent(vl_cov, accuracy = 1)), vjust = -1, color = "cyan4", fontface="bold", size = 6) +
  scale_y_continuous(
    name = "Counts",
    labels = label_comma(),  # Format the y-axis with commas
    sec.axis = sec_axis(~ . / ratio, name = "VL Coverage (%)", labels = scales::label_percent(accuracy = 1))
  ) +
  labs(
  #  title = "Viral Load Coverage by Age Group - Female",
    x = "Age Group",
    y = "Counts"
  ) +
  scale_fill_manual(
    name = "",
    values = c("vl_elig" = "blue", "TX_PVLS_D" = "#e30003")
  ) +
  theme_minimal() +
  theme(
    axis.title.y.right = element_text(color = "black"),  # Color secondary axis label
    legend.position = "bottom",
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),   # Remove minor grid lines
    axis.text.x = element_text(size = 14), # Adjust x-axis font size
    axis.text.y = element_text(size = 14)  # Adjust y-axis font size
  )

```


```{r}
# Sum of TX_NEW from Feb 2024 to Jul 2024 to determine eligibility for VL testing

tx_new_mar_aug<- data_fil %>% 
  filter(indicator == "TX_NEW_R",year == 2024 & month %in% c("Mar", "Apr", "May", "Jun", "Jul","Aug")) %>% 
  summarise(total_tx_new = sum(value, na.rm = TRUE)) %>% 
  pull(total_tx_new)
```


```{r}

# Clean the viral load data

vl_data <- clean_names(vl_data) %>% 
  select(-numerator, -denominator, -factor, -divisor, -multiplier)

vl_data <- vl_data %>%
  rename(facility = organisation_unit)

vl_data$data <- sub(":.*", "_R", vl_data$data)

vl_data_site <- vl_data %>% 
  left_join(prog_site,
            by = c("facility" = "org_unit"), relationship = "many-to-many")

vl_data_site <- vl_data_site %>%
  mutate(
    period = parse_date_time(period, orders = "b-y"),
    month = month(period, label = TRUE, abbr = TRUE),
    year = year(period)
  )

# Filter the data for August 2024

vl_data_jul <- vl_data_site %>%
  filter(period == ymd("2024-08-01"))

# Create VL Summaries by Site: VL <50, VL 50-199, VL 200-999 to be categorized as suppressed and VL >1000 to be categorized as unsuppressed
vl_cat <- vl_data_jul %>%
  mutate(vl_category = case_when(
    viral_load_result == "<50 c/ml" ~ "Suppressed",
    viral_load_result == "50-199 c/ml" ~ "Suppressed",
    viral_load_result == "200-999 c/ml" ~ "Suppressed",
    viral_load_result == ">1000 c/ml" ~ "Unsuppressed"
  ))

# Determine Low Level Viraemia (LLV) defined as VL 50-999 c/ml
vl_cat2 <- vl_cat %>%
  mutate(vl_category = case_when(
    viral_load_result == "50-199 c/ml" ~ "LLV",
    viral_load_result == "200-999 c/ml" ~ "LLV",
    TRUE ~ vl_category
  ))

# Sum of LLV

vl_llv <- vl_cat2 %>%
  filter(vl_category == "LLV") %>%
  summarise(total_llv = sum(value, na.rm = TRUE)) %>%
  pull(total_llv)

# Sum of VL Result <50 c/ml

vl_lt50 <- vl_cat2 %>% 
  filter(viral_load_result == "<50 c/ml") %>% 
  summarise(total_lt50 = sum(value, na.rm = TRUE)) %>% 
  pull(total_lt50)

# Summarize the value totals for vl_cat by site

vl_summary <- vl_cat %>%
  group_by(facility, vl_category) %>%
  summarise(total_value = sum(value, na.rm = TRUE))


# Pivot the vl_summary data with vl_category as columns and total_value as values

vl_summary_pivot <- vl_summary %>%
  pivot_wider(names_from = vl_category, values_from = total_value, values_fill = 0)

# Create a column for total_vl for each site

vl_summary_pivot <- vl_summary_pivot %>%
  mutate(total_vl = Suppressed + Unsuppressed)


# Calculate VL Suppression (vl_sup) by site: vl_sup = (Suppressed / total_vl) * 100

vl_summary_pivot <- vl_summary_pivot %>%
  mutate(vl_sup = (Suppressed / total_vl) * 100)

# Calculate total VL suppression for the Program

total_vl_sup <- vl_summary_pivot %>%
  ungroup() %>% 
  summarise(total_sup = sum(Suppressed, na.rm = TRUE)) %>% 
  pull(total_sup)

total_vld <- vl_summary_pivot %>%
  ungroup() %>% 
  summarise(total_vld = sum(total_vl, na.rm = TRUE)) %>% 
  pull(total_vld) 

prog_vl_sup <- vl_summary_pivot %>% 
  ungroup() %>% 
  summarise(vlsup = sum(Suppressed, na.rm = TRUE),
            ttl_vl = sum(total_vl, na.rm = TRUE),
            vlsup_rate = (vlsup / ttl_vl)
            ) %>% 
  pull(vlsup_rate)

```


```{r}

# Calculate Program area performance (indicator value/target_code value)

data_sum_new <- data_sum_r %>% 
  left_join(prog_targets_t,
            by = c("prog_area" = "prog_area"))

data_sum_new <- data_sum_new %>% 
 rename(result = total_value,
        target_name = target,
        target = value)


# Calculate performance and cap at 1 (100%)
data_sum_new <- data_sum_new %>%
  mutate(performance = result / target,
         color = case_when(
           performance < 0.50 ~ "red",
           performance >= 0.50 & performance < 0.75 ~ "yellow",
           performance >= 0.75 & performance < 0.90 ~ "green3",
           performance >= 0.90 ~ "darkgreen"
         ),
         text_color = ifelse(color == "yellow", "black", "white"))

```


```{r echo=FALSE, warning=FALSE, include=FALSE}

# Create individual plots for each program area
plot_list <- lapply(1:nrow(data_sum_new), function(i) {
  data_i <- data_sum_new[i, ]
  
  # Program area title box
  title_plot <- ggplot() +
    geom_rect(aes(xmin = 0, xmax = 1, ymin = 0, ymax = 1), fill = "blue4") +
    geom_text(aes(x = 0.5, y = 0.5, label = data_i$prog_area), color = "white", size = 3.5, fontface = "bold") +
    theme_void()
  
  # Performance box
  performance_plot <- ggplot(data_i, aes(x = 1, y = performance)) +
    geom_rect(aes(xmin = 0, xmax = 1, ymin = 0, ymax = 1), fill = data_i$color) +
    geom_text(aes(x = 0.5, y = 0.5, label = scales::percent(performance, accuracy = 1)), color = data_i$text_color, size = 4, fontface = "bold") +
    theme_void()
  
  # Result box
  result_plot <- ggplot(data_i) +
    geom_rect(aes(xmin = 0, xmax = 1, ymin = 0, ymax = 1), fill="white") +
    geom_segment(aes(x = 0, xend = 1, y = 0, yend = 0), color = "black")+
    geom_text(aes(x = 0.5, y = 0.5, label = scales::comma(result)), color = "black", size = 4, vjust = 0.5, hjust = 0.5, fontface="bold") +
    theme_void() 
  
  # Target box
  target_plot <- ggplot(data_i) +
    geom_rect(aes(xmin = 0, xmax = 1, ymin = 0, ymax = 1), fill = "white") +
    geom_text(aes(x = 0.5, y = 0.5, label = scales::comma(target)), color = "black", size = 4, vjust = 0.5, hjust = 0.5, fontface = "bold") +
    theme_void() 
  
  # Arrange the plots vertically
  arrangeGrob(title_plot, performance_plot, result_plot, target_plot, ncol = 1, heights = c(1, 1, 1, 1))
})

```


```{r echo=FALSE, message=FALSE, warning=FALSE, results='hide'}

# Create individual values for each program area in the data_sum_new data set using the result variable

hts_tst <- data_sum_new %>% 
  filter(prog_area == "HTS_TST") %>% 
  pull(result)

hts_pos <- data_sum_new %>% 
  filter(prog_area == "HTS_TST_POS") %>% 
  pull(result)

tx_new <- data_sum_new %>% 
  filter(prog_area == "TX_NEW") %>% 
  pull(result)

tx_curr <- data_sum_new %>%
  filter(prog_area == "TX_CURR") %>% 
  pull(result)

linkage <- tx_new/hts_pos

tx_pvls_d <- data_sum_new %>%
  filter(prog_area == "TX_PVLS_D") %>% 
  pull(result)

eligible_vl <- tx_curr - tx_new_mar_aug

vls <- total_vl_sup/tx_pvls_d

vlc <- tx_pvls_d/eligible_vl

vl_sup50 <- vl_lt50/tx_pvls_d



```


```{r}

# Initial cleaning and parameter setting for the RADET

radet <- clean_names(radet)

cut_off_dt <- as.Date("2024-08-31", format="%Y-%m-%d")

radet <- radet %>% 
  rename(facility = facility_name)


radet <- radet %>% 
  mutate(facility = ifelse(facility =="ba Nigerian Army Amoured Centre Medical Reception Station Bauchi", "ba 33 Brigade Medical Center Shadawanka", facility)) %>%
  
  mutate(patient_status = 
        case_when(
          patient_status == "Dead" ~ "Known death",
          patient_status == "Lost to follow up" ~ "Loss to follow up",
          patient_status == "Self Transfer" ~ "Self-transfer",
          patient_status == "Treatment stop" ~ "Stopped treatment",
          TRUE ~ patient_status),
        
        facility =
          case_when(
            facility == "82DMSH Enugu" ~ "82 Division Medical Services and Hospital",
            TRUE ~ facility
          )
  )

```


```{r}

# Function to convert dates in "dd-MMM-yy" format to Date objects on the RADET
convert_dates <- function(date_column) {
  dmy(date_column)
}

# Apply the conversion function to each date field dynamically
radet <- radet %>%
  mutate(across(contains("date"), ~convert_dates(.), .names = "cleaned_{.col}"))

# Ensure the cleaned dates are in the correct Date format
radet <- radet %>%
  mutate(across(contains("cleaned"), as.Date))

```




```{r}

# creating required columns, setting cut off date, and cleaning data

radet <- radet %>% 
    mutate(
        
       status_check =
           case_when((as.Date(cleaned_last_dispensed_date) + arv_refill_days +28)>=cut_off_dt & patient_status != "Known death" & patient_status !="Transferred out" & patient_status !="Stopped treatment"  ~ "Active",
                     TRUE ~ "Inactive"),
         
         mmd =
           case_when(
             is.na(arv_refill_days) ~ NA_character_,
             arv_refill_days <90 ~ "<3",
             arv_refill_days >=90 & arv_refill_days <120 ~ "3",
             arv_refill_days >=120 & arv_refill_days <180 ~ "4-5",
             arv_refill_days >=180 ~ "6+"),
         
        
        #age_group = 
         # case_when(age_group == "04-Jan" ~ "1-4",
          #          age_group == "09-May" ~ "5-9",
           #         age_group == "14-Oct" ~ "10-14",
            #        TRUE ~ age_group
             #       
              #      ),
           
         age_ngi =
           case_when(age <15 ~ "<15",
                    TRUE ~ "15+"),
         
         eligible_vl =
           case_when((cut_off_dt - as.Date(cleaned_art_start_date)) >180 & status_check == "Active" ~ "Eligible",
                     TRUE ~ "Ineligible"),
         
         current_vl = 
           case_when(
             is.na(eligible_vl) ~ NA_character_,
             eligible_vl == "Ineligible" ~ NA_character_,
             eligible_vl == "Eligible" & current_vl_result >=1 & (cut_off_dt - as.Date(cleaned_date_of_sample_collection)) <=365 ~ "Current VL",
             TRUE ~ "No VL"),
         
         supp_1000 = 
           case_when(
             is.na(current_vl) ~ NA_character_,
             current_vl == "Current VL" & current_vl_result >0 & current_vl_result <1000 ~ "Suppressed",
             current_vl == "Current VL" & current_vl_result >0 & current_vl_result >=1000 ~ "Unuppressed",
             TRUE ~ "No VL"
           ),
       
         supp_50 = 
           case_when(
             is.na(current_vl) ~ NA_character_,
             current_vl == "Current VL" & current_vl_result >0 & current_vl_result <50 ~ "Suppressed",
             current_vl == "Current VL" & current_vl_result >0 & current_vl_result >=50 ~ "Unuppressed",
             TRUE ~ "No VL"
           ),
         
         vl_category =
           case_when(
             is.na(current_vl_result) ~ NA_character_,
             current_vl == "Current VL" & current_vl_result >0 & current_vl_result <50 ~ "<50",
             current_vl == "Current VL" & current_vl_result >=50 & current_vl_result <200 ~ "50-199",
             current_vl == "Current VL" & current_vl_result >=200 & current_vl_result <1000 ~ "200-999",
            current_vl == "Current VL" & current_vl_result >=1000 ~ "≥1000"
           ),
        
         vl_monitoring = 
           case_when(
             is.na(viral_load_indication)| eligible_vl=="Ineligible" | current_vl =="No VL" ~ NA_character_,
        viral_load_indication = grepl("baseline", viral_load_indication, ignore.case = TRUE) | grepl("pregnancy", viral_load_indication, ignore.case = TRUE) | grepl("routine", viral_load_indication, ignore.case = TRUE) | grepl("1month", viral_load_indication, ignore.case = TRUE) ~ "Routine", 
             TRUE ~ "Targeted"
           ),
        
        
      regimen_line = 
           case_when(regimen_line == "Adult 1st Line" ~ "1st Line",
                     regimen_line == "Adult First Line" ~ "1st Line",
                     regimen_line == "Pediatric 1st Line" ~ "1st Line",
                     regimen_line == "Pediatric 1st line" ~ "1st Line",
                     regimen_line == "Pediatric First Line" ~ "1st Line",
                     regimen_line == "Pediatrics and Adolescent 1st Line <20kg" ~ "1st Line",
                     regimen_line == "Pediatrics and Adolescent 1st Line >30kg" ~ "1st Line",
                     regimen_line == "Pediatrics and Adolescent 1st Line 20-30kg" ~ "1st Line",
                     regimen_line == "Adult 2nd Line" ~ "2nd Line",
                     regimen_line == "Adult Second Line" ~ "2nd Line",
                     regimen_line == "Pediatric 2nd Line" ~ "2nd Line",
                     regimen_line == "Pediatric Second Line" ~ "2nd Line",
                     regimen_line == "Pediatrics and Adolescent 2nd Line <20kg" ~ "1st Line",
                     regimen_line == "Pediatrics and Adolescent 2nd Line >30kg" ~ "1st Line",
                     regimen_line == "Pediatrics and Adolescent 2nd Line 20-30kg" ~ "1st Line",
                     regimen_line == "Adult Third Line" ~ "3rd Line",
                     regimen_line == "Adult 3rd Line" ~ "3rd Line",
                     regimen_line == "Pediatrics and Adolescent 3rd Line >30kg" ~ "3rd Line",
                     TRUE ~ regimen_line),
      
      
      
      sex =
        case_when(
          sex == "Other" ~ "Female",
          sex == "transgender" ~ "Female",
          TRUE ~ sex),
      
       service_status =
        case_when(
          is.na(service_status) ~ "Civilian",
          TRUE ~ service_status
        )
   ) 


radet_tx_curr <- radet %>%
  filter(status_check == "Active") %>% 
  summarise(total_tx_curr = n()) %>% # Count the number of active patients
  pull(total_tx_curr)                # Extract the resulting value


radet_elig_vl <- radet %>% 
  filter(eligible_vl =="Eligible") %>% 
  summarise(total_eligible = n()) %>% 
  pull(total_eligible)


radet_current_vl <- radet %>% 
  filter(current_vl == "Current VL") %>% 
  summarise(total_current_vl = n()) %>% 
  pull(total_current_vl)


radet_vls <- radet %>% 
  filter(supp_1000 == "Suppressed") %>% 
  summarise(total_vls = n()) %>% 
  pull(total_vls)

radet_vls50 <- radet %>% 
  filter(supp_50 == "Suppressed") %>% 
  summarise(total_vls50 = n()) %>% 
  pull(total_vls50)

```



```{r}



```


# PROGRAM CASCADE FY24

##  {height="30%"}

```{r} 
# Set font color to white

value_box(
  title = tags$span("Total Testing", style = "font-size: 30px; color: white; font-weight:bold;"),
  value = tags$span(scales::comma(hts_tst), style = "color: white; "),
  showcase = tags$span(bsicons::bs_icon("droplet"), style = "color: white;"),
  theme = value_box_theme(bg = "#0055cc")
)
```

```{r}
value_box(
  title = tags$span("Total Positives", style = "font-size: 30px;font-weight:bold;"),
  value = scales::comma(hts_pos),
  showcase = bsicons::bs_icon("plus-circle-fill"),
  theme = value_box_theme(bg ="#8B0000")
)
```

```{r}
value_box(
  title = tags$span("Total New on ART", style = "font-size: 30px; font-weight:bold;"),
  value = scales::comma(tx_new),
  showcase = bsicons::bs_icon("prescription"),
  theme = value_box_theme(bg ="#518")
)
```

```{r}
value_box(
  title = tags$span("Linkage to ART", style = "font-size: 30px;font-weight:bold;"),
  value = scales::percent(linkage),
  showcase = bsicons::bs_icon("link-45deg"),
  theme = value_box_theme(bg ="#006611")
)
```

##  {height="30%"}

```{r}
value_box(
  title = tags$span("Current on Treatment", style = "font-size: 30px;font-weight:bold;"),
  value = scales::comma(radet_tx_curr),
  showcase = bsicons::bs_icon("people"),
  theme = value_box_theme(bg ="#002a2a")
)
```

```{r}
value_box(
  title = tags$span("Had a Viral Load", style = "font-size: 30px;font-weight:bold;"),
  value = scales::comma(radet_current_vl),
  showcase = bsicons::bs_icon("virus"),
  theme = value_box_theme(bg ="#004646")
)
```

```{r}
value_box(
  title = tags$span("Total Suppressed", style = "font-size: 30px;font-weight:bold;"),
  value = scales::comma(radet_vls),
  showcase = bsicons::bs_icon("chevron-double-down"),
  theme = value_box_theme(bg ="#a9d0b8")
)
```

##  {height="30%"}

```{r}
value_box(
  title = tags$span("VL Coverage", style = "font-size: 30px;font-weight:bold;"),
  value = scales::percent(radet_current_vl/radet_elig_vl),
  showcase = bsicons::bs_icon("align-top"),
  theme = value_box_theme(bg ="#93bdcf")
)
```

```{r}
value_box(
  title = tags$span("VL Suppression", style = "font-size: 30px;font-weight:bold;"),
  value = scales::percent(radet_vls/radet_current_vl),
  showcase = bsicons::bs_icon("box-arrow-in-down-right"),
  theme = value_box_theme(bg ="#0aff76")
)
```

```{r}
value_box(
  title = tags$span("Undetectable VL <50 c/ml", style = "font-size: 30px;font-weight:bold;"),
  value = scales::percent(radet_vls50/radet_current_vl),
  showcase = bsicons::bs_icon("virus2"),
  theme = value_box_theme(bg ="#cf402e")
)
```

# Program Performance FY24

## Performance Summary

### {width=50%}

```{r echo=FALSE, results='asis', warning=FALSE, message=FALSE, title="PROGRAM AREA PERFORMANCE AGAINST TARGETS | OCTOBER 2023 - AUGUST 2024", height=550, width = 800}
# windows(width = 20, height = 10)
grid.newpage()  # Clear the existing grid
grid.draw(grid.arrange(grobs = plot_list, ncol = 6))
```




### Viral Load Coverage by Age Group {width=50%}

```{r title = "VIRAL LOAD COVERAGE AMONG MALES", fig.width=20, fig.height=7}

vlc_male
```

```{r title = "VIRAL LOAD COVERAGE AMONG FEMALES", fig.width=20, fig.height=7}
# windows (width = 20, height = 10)
vlc_fem
```


